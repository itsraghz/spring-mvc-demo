package com.raghsonline.phonebook.service.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;
import java.util.Optional;

import org.apache.log4j.Logger;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

import com.raghsonline.phonebook.exception.BusinessException;
import com.raghsonline.phonebook.model.Contact;
import com.raghsonline.phonebook.service.ContactService;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class TestContactServiceImpl 
{
	/**
	 * <p>
	 * A class level logger instance.
	 * </p>
	 */
	Logger logger = Logger.getLogger(TestContactServiceImpl.class);
	
	/**
	 * <p>
	 * An instance of ContactService whose data will be operated upon
	 * in this Test class.
	 * </p>
	 * <p>
	 * TODO: For now, we will have a new instance created by ourselves, later
	 * we will bring in @Autowired of Spring Container/Context. 
	 * </p>
	 */
	//TODO Rectify the arg to constructor later.
	ContactService contactService = new ContactServiceImpl(null);
	
	@Test
	@DisplayName("GetAllContacts should return min 4 contacts")
	@Order(1)
	public void getAllContacts()
	{
		List<Contact> contactList = contactService.getAllContacts();
		
		assertNotNull(contactList);
		
		/* ============================================== */
		/*    Strategy #1 - Changing the Condition        */
		/* ============================================== */
		
		/* fails with the addContact() method with the initial size 4*/
		//assertEquals(4, contactList.size()); 
		
		/* this should work as the condition is now changed! */
		//assertTrue(contactList.size() >= 4); 
		
		/* ============================================== */
		/*    Strategy #2 - Changing the Order	          */
		/* ============================================== */
		
		/* 
		 * Should work now as expected and pass, because of two factors
		 *    1. We mentioned the @Order with "1" value, and we added @Order(2) for addContact() method
		 *         this method will be executed in the 1st place
		 *    2. The static list in the ServiceImpl class will be reloaded because 
		 *    		JUnit Execution will start the JVM afresh every time we run it. 
		 *    		When the ServiceImpl class gets loaded, the list will be re-initialized
		 *    		with the default values - of 4 size what we added in the static 
		 *    		initializer block
		 */
		assertEquals(4, contactList.size()); 
		
		/* this should also work as the condition will still help */
		assertTrue(contactList.size() >= 4);
		
		logger.info("Contact List - size : " + contactList.size());
		logger.info("Contact List - Contents : " + contactList);
		//contactList.stream().forEach(System.out::println);
		contactList.stream().forEach(logger::info);
	}
	
	@Test
	@DisplayName("A contact should get added successfully")
	@Order(2)
	public void addContact() throws BusinessException
	{
		/* 
		 * Though a zero OR no-arg constructor can be used (legally), 
		 * it does not help much because we need the actual values for 
		 * the rest of the attributes of the Class.
		 * 
		 * Hence, we should actually used the All Args constructor
		 * generated by Lombok (via @AllArgsConstructor).
		 * 
		 * The ID field can be passed as "0" during the construction time,
		 * but while inserting, the Service Layer can supply the actual
		 * running sequence value appropriately.
		 */
		//Contact contact = new Contact();
		Contact contact = new Contact(0, "Test", "User", "2000-08-08", "12345567890", 
				"test@test.com", "Test Notes", "Test Tag");
		
		long seqNo = contactService.addContact(contact);
		
		assertNotNull(seqNo);
		
		/* Most safest assertion on the Sequence No. */	
		assertTrue(seqNo > 0); 
		
		/* A bit more calculative assertion on the Sequence No. */
		assertTrue(seqNo > 4);
		
		/* Can I do the assertion on any other factor/attribute ? */ 
		/* Just now we added a new element into the list, so the list size should be >4 */
		assertTrue(contactService.getAllContacts().size() > 4);
		assertTrue(contactService.getAllContacts().size() >= 5);
	}
	
	@Test
	@DisplayName("Get/Retrieve a Contact by Id")
	@Order(3)
	public Optional<Contact> getContact()
	{
		System.out.println("getContact() invoked");
		
		int id = 1;
		
		return getContact(id);
	}

	public Optional<Contact> getContact(int id)
	{
		System.out.println("getContact(id) invoked, id="+id);
		
		Optional<Contact> contact = contactService.getContactById(id);
		
		// Old style 
		/* contact contact = contactService.getContactById(id);
		assertNotNull(contact);
		System.out.println("Contact Object : " + contact); */
		
		// New style - using Optionals
		/* It will always be NOT null */
		assertNotNull(contact);
		
		System.out.println("Contact present ? " + contact.isPresent());
		System.out.println("Contact empty ? " + contact.isEmpty());
		
		if(contact.isPresent()) 
		{
			System.out.println("Contact object : " + contact.get());
			System.out.println("### Contact object Hashcode : " + contact.get().hashCode());
			assertNotNull(contact.get());
		}
		
		return contact;
	}
	
	@Test
	@DisplayName("Updating the attributes of a Contact object")
	@Order(4)
	public void updateContact() throws BusinessException
	{
		System.out.println("updateContact() invoked");
		
		/*Optional<Contact> optionalContact = getContact();
		
		Contact contact = null;
		
		if(optionalContact.isPresent())
		{
			contact = optionalContact.get();
		}*/
		
		Contact contact = getContact().get();
		System.out.println("contact obtained from getContact() : "+ contact);
		System.out.println("### Hashcode of the contact : "+ contact.hashCode());
		
		assertNotNull(contact);
		
		contact.setNotes(contact.getNotes()+ ", #Updated");
		System.out.println("contact updated :: "+ contact);
		
		contactService.updateContact(contact);
		
		/* Good deal, to add+1 to the size, as we always remove one and add one into the List */
		int lastInsertedId = contactService.getAllContacts().size()+1;
		
		Contact updatedContact = getContact(lastInsertedId).get();
		System.out.println("updatedContact obtained from getContact() : "+ updatedContact);
		System.out.println("### Hashcode of the updatedContact : "+ updatedContact.hashCode());
		
		assertNotNull(updatedContact);
		assertTrue(updatedContact.getNotes().endsWith("#Updated"));
	}
	
	@Test
	@DisplayName("Deletion of a Contact")
	@Order(5)
	public void deleteContact()
	{
		/* 
		 * We can delete a contact by two ways 
		 * 
		 * 1. Using the ID - Sequence (Index) - We can use this for now.
		 * 2. Using the ContactNo - Primary Key 
		 */
		
		int id = 3;
		boolean status = contactService.deleteContact(id);
		
		System.out.println("Deletion status - " + status);
		
		assertTrue(status);
		
		contactService.getAllContacts().stream().forEach(logger::debug);
	}
}
