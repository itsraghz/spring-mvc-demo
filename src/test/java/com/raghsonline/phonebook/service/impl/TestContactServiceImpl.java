package com.raghsonline.phonebook.service.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.apache.log4j.Logger;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

import com.raghsonline.phonebook.model.Contact;
import com.raghsonline.phonebook.service.ContactService;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class TestContactServiceImpl 
{
	/**
	 * <p>
	 * A class level logger instance.
	 * </p>
	 */
	Logger logger = Logger.getLogger(TestContactServiceImpl.class);
	
	/**
	 * <p>
	 * An instance of ContactService whose data will be operated upon
	 * in this Test class.
	 * </p>
	 * <p>
	 * TODO: For now, we will have a new instance created by ourselves, later
	 * we will bring in @Autowired of Spring Container/Context. 
	 * </p>
	 */
	ContactService contactService = new ContactServiceImpl();
	
	@Test
	@DisplayName("GetAllContacts should return min 4 contacts")
	@Order(1)
	public void getAllContacts()
	{
		List<Contact> contactList = contactService.getAllContacts();
		
		assertNotNull(contactList);
		
		/* ============================================== */
		/*    Strategy #1 - Changing the Condition        */
		/* ============================================== */
		
		/* fails with the addContact() method with the initial size 4*/
		//assertEquals(4, contactList.size()); 
		
		/* this should work as the condition is now changed! */
		//assertTrue(contactList.size() >= 4); 
		
		/* ============================================== */
		/*    Strategy #2 - Changing the Order	          */
		/* ============================================== */
		
		/* 
		 * Should work now as expected and pass, because of two factors
		 *    1. We mentioned the @Order with "1" value, and we added @Order(2) for addContact() method
		 *         this method will be executed in the 1st place
		 *    2. The static list in the ServiceImpl class will be reloaded because 
		 *    		JUnit Execution will start the JVM afresh every time we run it. 
		 *    		When the ServiceImpl class gets loaded, the list will be re-initialized
		 *    		with the default values - of 4 size what we added in the static 
		 *    		initializer block
		 */
		assertEquals(4, contactList.size()); 
		
		/* this should also work as the condition will still help */
		assertTrue(contactList.size() >= 4);
		
		logger.info("Contact List - size : " + contactList.size());
		logger.info("Contact List - Contents : " + contactList);
		//contactList.stream().forEach(System.out::println);
		contactList.stream().forEach(logger::info);
	}
	
	@Test
	@DisplayName("A contact should get added successfully")
	@Order(2)
	public void addContact()
	{
		/* 
		 * Though a zero OR no-arg constructor can be used (legally), 
		 * it does not help much because we need the actual values for 
		 * the rest of the attributes of the Class.
		 * 
		 * Hence, we should actually used the All Args constructor
		 * generated by Lombok (via @AllArgsConstructor).
		 * 
		 * The ID field can be passed as "0" during the construction time,
		 * but while inserting, the Service Layer can supply the actual
		 * running sequence value appropriately.
		 */
		//Contact contact = new Contact();
		Contact contact = new Contact(0, "Test", "User", "2000-08-08", "12345567890", 
				"test@test.com", "Test Notes", "Test Tag");
		
		int seqNo = contactService.addContact(contact);
		
		assertNotNull(seqNo);
		
		/* Most safest assertion on the Sequence No. */	
		assertTrue(seqNo > 0); 
		
		/* A bit more calculative assertion on the Sequence No. */
		assertTrue(seqNo > 4);
		
		/* Can I do the assertion on any other factor/attribute ? */ 
		/* Just now we added a new element into the list, so the list size should be >4 */
		assertTrue(contactService.getAllContacts().size() > 4);
		assertTrue(contactService.getAllContacts().size() >= 5);
	}

}
